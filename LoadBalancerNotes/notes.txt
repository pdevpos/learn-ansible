Q:Public IP for servers: we cannot expose our servers to the outside world. we should not public ip for servers. this is traditional
=================================================================
Ans: Loadbalancer

* Instance recreating for every run so to avoid this we can use
lifecycle{
ignore_changes[ami]
}
to ignore ami instance recreation
* netstat -lntp
* connect with backend server ip address
* curl localhost:8080/----cannot GET
* curl -v localhost:8080/ ----
* curl -v localhost:8080/health----
configure health checks:
=========================
healthy_threshold:

target deregistration management:
================================
it will work for the nature of an application:
to decouple a server from the loadbalancer  only all my request completes on the particular server.
request avaialble in that server should completes then only we want to do a deregister.
that deregister application will take 10 mins


check backend health checks
then check frontend health: this frontend health is in expense.config file

* to attach load balancer dns record to aws_route53
records = [aws_lb.lb[0].dns_name]
* then dns records will added in hosted zone


*************************************************************************************************
Q: Wide security groups:servers should not open widely outside world, no need to open what is needed
security groups:
================
two types of security groups are there :
1. server security groups:which node doesn't have an access loadbalancer
***for server security groups : we can allow ssh port only for respective bastion nodes
here bastion_nodes are private server ip.
2. load balancer security groups:which node can access loadbalancer
3.In load balancer , loadbalancer is connecting to frontend i.e, connected with public ip address
pass public subnets through frontend module and add in security groups
for backend loadbalancer, frontend connecting to loadbalancer and load blanacer is connecting to backend,so here two server ip address
are there
frontend and backend subnets.
pass these two subnets through backend module and add to security groups
4.mysql--- backend servers can connect to mysql
so pass backend server ip address through mysql module...
and add to securtiy groups......


security Loadbalancer changes:
=====================
access outside so,,
In frontend :
=============
sg_port = ["0.0.0.0/0"]--- add to load balancer security group
In backend:
===========
sg_port = frontend server ip address---- add to load balancer security group
now change main server to loadbalancer security in aws route53.
* while running the application better to check in security groups of there particular node


Q:Website we are using Ip address, we need name:
==============================================
Ans:means by using loadbalancer dns name we run the application

Q: we are using http,but standards it has to be https
======================================================
Ans: when we run the application through http automatically change as https
In Load balancer we can do this wotk

Create a certificate:
=====================
1.select certificate manager in aws service
2.create request
3.integrate with dns records
4.in load balancer: add listeners in that choose https and then add certificate name

redirect http to https
default_action{
type = redirect
redirect = {

}
}
default_Action=
{
type=forward
}
for https we can add target group

will get like not reachable in loadbalancer means need not open the port in the security group.
so add this 443 to security group then only it will allow.
find . - name "name.json"
find .ansible/
how to pass dynamic ports in terraform?
there is a dynamic block

Decouple the servers:
======================

1.added security group in load balancer----it will allow all types of ports when cidr block is as 0.0.0.0/0
2. added ssh port and cidr is a bastion node
3. added app_port and cidr means here
frontend access loadbalancer so var.public_Subnets will pass through modules
backend access frontend and loabalancer so var.frontend,var.backend subnets
mysql access by backend so var.backend subnets
add condition who can access load balancer
4.create another security who can access load balancer
for this fronntend access loadbalancer so cidr_block as 0.0.0.0/0 to connect outside
for this backend access frontend so cidr block is a frontend
5. certificate manager
6.redirect
7.how to add ports dynamically in terraform?